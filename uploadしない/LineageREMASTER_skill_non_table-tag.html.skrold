<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8" />
    <title>リネージュリマスター・スキル一覧</title>
    <meta name="description" content="">
    <meta name="keywords" content="">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css">
    <!-- <link rel="stylesheet" href="normalize.css"> -->
    <!-- アイコンフォントの利用方法 http://fortawesome.github.io/Font-Awesome/ -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
    <!-- <link rel="stylesheet" href="font-awesome.min.css"> -->
    <link rel="stylesheet" href="Lineage_main.css">

    <!-- <script src="jquery.min.js"></script> -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="Lineage_main.css">
    <style>
        table {
            width: 90%;
            border-collapse: collapse;
            border-color: #ffffff;
            background-color: #ffffff;
        }
        tbody {
            display: block;
            width: 100%;
            overflow-x: auto;
        }
        tr {
            border-bottom: 1px solid #ddd;
        }
        .sr-only {
            position: absolute;
            width: 1px;
            height: 1px;
            margin: -1px;
            padding: 0;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            border: 0;
        }
    .footer-text {
        margin-bottom: 6px;
        color: #999;
        font-size: 0.8em;
    }
    .footer-copyright {
        color: #000;
        font-size: 0.8em;
    }
    @media (max-width: 398px) {
        .col-header {
            width:30px;
        }
        .col-data_no {
            width:30px;
        }
        .col-data {
            width:calc(100% - 30px);
        }
        .col-data_level {
            width:calc(100% - 30px);
        }
    }
    </style>
</head>
<body>
    <div class="nav">
        <ul class="nav-group">
            <li><a href="/index.html">ホーム</a><i class="fa fa-home"></i></li>
            <li><a href="Lineage_table_monster.html">MonsterList</a></li>
            <li><a href="Lineage_table_drop.html">DropList</a></li>
            <li><a href="LineageREMASTER_skill_spv.html" class="active">&nbsp;SkillList</a></li>
            <li><a href="LineageREMASTER_IME.html">IME</a></li>
            <li><a href="LineageREMASTER_ATOK.html">ATOK</a></li>
            <li><a href="LineageREMASTERED_etc.html">諸表</a></li>
            <li><a href="font.html">大字</a></li>
        </ul>
    </div>
<!-- ページ冒頭に非表示で読み上げ対応の国際化・説明テキスト -->
    <p id="screenreader-info" lang="en">
        This page lists MMORPG skills for Japanese-speaking players. It does not contain navigation or language switching. If you are using a screen reader or are not fluent in Japanese, please note that this page is for reference only and may not offer interactive support.
    </p>
<!-- 日本語でのページ説明（視認表示可） -->
    <p id="screenreader-info_jp" class="page-description">
        このページは日本語話者向けに設計されたMMORPGスキルの一覧表です。リンクやナビゲーション機能は設けておらず、ページ全体の内容を1ページで完結する構成になっています。内容の把握を主目的としています。
    </p>
<!-- 技術・魔法一覧のインポート(旧仕様)※スマホでは取得できないから 
 <input type="file" id="fileInput">
-->
<!-- 技術・魔法一覧のインポート(前仕様)※ファイル全体のペースト(長大なデータでは不適当) -->
<!-- <button id="submitBtn">表示</button>
     <div id="output"></div>
-->
<!-- 技術・魔法一覧のインポート(新仕様)※ファイル名のハードコーディング -->
    <button id="loadBtn">表示</button>
<!-- HTML（ボタンやセレクトボックスを追加） -->
    <div id="classFilterBtns" style="margin-bottom: 10px;">
<!--         <button class="class-btn" data-cls="all">全て</button> -->
        <button class="class-btn" data-cls="君">君</button>
        <button class="class-btn" data-cls="騎">騎</button>
        <button class="class-btn" data-cls="妖">妖</button>
        <button class="class-btn" data-cls="魔">魔</button>
        <button class="class-btn" data-cls="闇">闇</button>
        <button class="class-btn" data-cls="竜">竜</button>
        <button class="class-btn" data-cls="闘">闘</button>
        <button class="class-btn" data-cls="剣">剣</button>
        <button class="class-btn" data-cls="槍">槍</button>
        <button class="class-btn" data-cls="闘">闘</button>
        <button class="class-btn" data-cls="幻">幻</button>
        <button class="class-btn" data-cls="聖">聖</button>
    </div>
<!-- 技術・魔法一覧の表示 -->    
    <div id="result"></div>
<!-- 脚注・権利表記 -->
    <div class="footer-text">
        <footer role="contentinfo">
            <section lang="ja">
                <small>当サイトで使用されているリネージュの画像・BGM及びその他の表現物の権利は下記のとおり権利者に帰属します：</small>
            </section>
            <section lang="en">
                <small>Lineage and Lineage Eternal Life are registered trademarks of NCsoft Corporation.&copy;  1998-2011 Copyright NCsoft Corporation. NC Japan K.K. was granted by NCsoft Corporation the right to publish, distribute, and transmit Lineage Eternal Life in Japan. All Rights Reserved.</small>
            </section>
            <section lang="zh-TW">
                <small>本頁面使用之《Lineage》相關素材，其版權皆屬原創作者所有。</small>
            </section>
        </footer>
    </div>
<!-- FC2ではapplication/scriptでもjsファイル読み込み時にtext/htmlに帰られて駆動しない -->
<!--    <script src="lineage_skill.js" defer></script> -->
<script>
// スクリプトの読み込みを待つためのDOMContentLoadedイベントリスナー
    document.addEventListener('DOMContentLoaded', function() {
        console.log("DOM読み込み完了");
    });
// document.getElementById('fileInput').addEventListener('change', function(e) {
//スマホでは無理だからTSV選択はさせない。TSVファイル名のハードコーディング。
document.getElementById('loadBtn').addEventListener('click', function() {
// 英文説明/日本語説明をスクリーンリーダー向けの非表示スタイルを付加
    const info_en = document.getElementById("screenreader-info");
    const info_jp = document.getElementById("screenreader-info_jp");
// 非表示クラスを付加（すでに付いていなければ）
    if (!info_en.classList.contains("sr-only")) {
        info_en.classList.add("sr-only");
    }
    if (!info_jp.classList.contains("sr-only")) {
        info_jp.classList.add("sr-only");
    }
// url掃除ページロード時をイベントとして処理するのは宿題。今は表示ボタンがトリガー。
// 表示されていない状態なのに #class=xxx があるならハッシュを消す
    if (!document.getElementById('result').innerHTML && location.hash.includes("class=")) {
        history.replaceState(null, null, location.pathname);
    }
// TSV読み込みと描画 タイムスタンプを附与したリクエストによる強制再読み込みによって、FC2Serverのキャッシュ寿命を回避。
    fetch('LineageREMASTER_skill3.txt?v=' + new Date().getTime())
        .then(response => response.text())
        .then(text => {
//test用
// 読み込み成功時の処理
console.log("スクリプト開始");
console.log("DOM読み込み待機中");
//
//document.addEventListener('DOMContentLoaded', () => {
//  console.log("DOM読み込み完了");
//
//  const btn = document.getElementById('loadBtn');
//  if (btn) {
//    console.log("ボタン取得成功");
//    btn.addEventListener('click', () => {
//      console.log("ボタンクリック");
//      fetch('LineageREMASTER_skill3.txt?v=' + new Date().getTime())
//        .then(response => {
//          if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
//          return response.text();
//        })
//        .then(text => {
//          console.log("読み込み成功");
//          document.getElementById('result').textContent = text;
//        })
//        .catch(error => {
//          console.error("読み込みエラー:", error);
//        });
//    });
//  } else {
//    console.log("loadBtn 見つからず");
//  }
//});
function setup() {
  console.log("setup開始");

  const btn = document.getElementById('loadBtn');
  if (btn) {
    console.log("ボタン取得成功");
    btn.addEventListener('click', () => {
      console.log("ボタンクリック");
      fetch('LineageREMASTER_skill3.txt?v=' + new Date().getTime())
        .then(response => {
          if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
          return response.text();
        })
        .then(text => {
          console.log("読み込み成功");
          document.getElementById('result').innerHTML = html;
//          document.getElementById('result').textContent = text;
        })
        .catch(error => {
          console.error("読み込みエラー:", error);
        });
    });
  } else {
    console.log("loadBtn 見つからず");
  }
}
// DOMContentLoaded イベントを使用して、DOMの読み込み完了を待つ
if (document.readyState === 'loading') {
  console.log("DOM読み込み待機中");
  document.addEventListener('DOMContentLoaded', setup);
} else {
  console.log("DOMすでに構築済み、即時実行");
  setup();
}
            // Windowサイズによって表示を切り替える
window.addEventListener('DOMContentLoaded', function() {
  if (window.innerWidth <= 398) {
    document.querySelectorAll('.record-table table').forEach(table => {
      table.querySelectorAll('tr').forEach(tr => {
        const cells = Array.from(tr.children);
        if (cells.length > 2) {
          let newRows = [];
          for (let i = 0; i < cells.length; i += 2) {
            let newTr = document.createElement('tr');
            if (cells[i]) newTr.appendChild(cells[i].cloneNode(true));
            if (cells[i+1]) newTr.appendChild(cells[i+1].cloneNode(true));
            newRows.push(newTr);
          }
          let parent = tr.parentNode;
          parent.insertBefore(newRows[0], tr);
          for (let i = 1; i < newRows.length; i++) {
            parent.insertBefore(newRows[i], newRows[i-1].nextSibling);
          }
          parent.removeChild(tr);
        }
      });
    });
  }
});
// 必要ならここでparseTSV(text)などの処理を呼び出す
// document.getElementById('submitBtn').addEventListener('click', function() {
//     const text = document.getElementById('textInput').value;
//     parseTSV(text);
// });
// function parseTSV(text) {
// ここにTSVパース＆表示処理を書く
//    const reader = new FileReader();
//     reader.onload = function() {
        const lines = text.trim().split('\n');
        let html = `<table>`;
        for (const line of lines) {
            const fields = line.split('\t');
            console.log(`フィールド数(${line}):`, fields.length); // フィールド数を確認

            if (fields.length < 24) {
                console.warn("データ不足:", fields);
                continue; // フィールド数が不足している場合スキップ
            }
            const [no,img,level,name,cls,elf,active,type,align,mp,hp,material,duration,target,reuse,effect,acqLv,obtain,price,Droporigin,Dropcomp,note1,note2,EOR] = line.split('\t');

            // 各フィールドをTAB分割 EOR(End Of Record)を無視
            // imgは画像のURLだが、ここでは使用しないので無視。値は"全角Space"
            // EORは行の終わりを示すが、ここでは使用しないので無視。値は"■"
            // clsとelfのまとめ表示
            let clsDisplay = cls;
            if (cls === "妖" && elf) {
                clsDisplay += `（${elf}）`;
            }
// 各フィールドの値を変数に格納
            if (window.innerWidth <= 398) {
// #region sauce
//  --- スマホ用テーブル出力 ---
                html += `<tr class="record-table" data-cls="${cls}"><td colspan="2"><table>`;
                html += `<tr><td class="col-data_no">No.${no}</td><td class="col-data_level">${level}</td></tr>`;
                html += `<tr><td class="col-data_skillname" colspan="2">${name}</td></tr>`;
                html += `<tr><th class="col-header">習得クラス</th><td class="col-data">${clsDisplay}</td></tr>`;
                html += `<tr><th class="col-header">活性</th><td class="col-data">${active}</td></tr>`;
                html += `<tr><th class="col-header">種類</th><td class="col-data">${type}</td></tr>`;
                html += `<tr><th class="col-header">性向</th><td class="col-data">${align}</td></tr>`;
                html += `<tr><th class="col-header">消耗MP</th><td class="col-data">${mp}</td></tr>`;
                html += `<tr><th class="col-header">消耗HP</th><td class="col-data">${hp}</td></tr>`;
                html += `<tr><th class="col-header">材料・触媒</th><td class="col-data">${material}</td></tr>`;
                html += `<tr><th class="col-header">持続時間</th><td class="col-data">${duration}</td></tr>`;
                html += `<tr><th class="col-header">対象</th><td class="col-data">${target}</td></tr>`;
                html += `<tr><th class="col-header">再使用時間</th><td class="col-data">${reuse}</td></tr>`;
                html += `<tr><th class="col-header">効果・性能</th><td class="col-data">${effect}</td></tr>`;
                html += `<tr><th class="col-header">習得Lv.</th><td class="col-data">${acqLv}</td></tr>`;
                html += `<tr><th class="col-header">取得方法</th><td class="col-data">${obtain}</td></tr>`;
                html += `<tr><th class="col-header">価格</th><td class="col-data">${price}</td></tr>`;
                html += `<tr><th class="col-header">ドロップ</th><td class="col-data">${Droporigin}</td></tr>`;
                html += `<tr><th class="col-header">【蘇生】</th><td class="col-data">${Dropcomp}</td></tr>`;
                html += `<tr><th class="col-header">備考1</th><td class="col-data">${note1}</td></tr>`;
                html += `<tr><th class="col-header">備考2</th><td class="col-data">${note2}</td></tr>`;
                html += `</table></td></tr>`;
            } else {
// #endregion
//  --- PC用テーブル出力 ---
            html += `<tbody class="record-table" data-cls="${cls}">`
            // No.とLevelとスキル名は「<th>～」を使用しない。
                html += `<tr>
                            <td class="col-data_no">No.${no}</td>`
                // ...existing code...
                // 等級・スキルレベルの出力部分
                            if (/^\d+$/.test(level)) {
                    // 数字のみの場合
                                html += `<td class="col-data_level">Lv.${level}</td>`;
                            } else {
                    // 空または文字列（神話・伝説など）の場合
                                html += `<td class="col-data_level">${level}</td>`;
                            }   
                 //            <th class="col-header" colspan="2">等級・スキルレベル</th><td class="col-data">${level}</td>
                    html += `<td class="col-data_skillname" colspan="9">${name}</td>
                        </tr>`
                html += `<tr>
                            <th class="col-header">習得クラス</th>
                            <td class="col-data" colspan="2">${clsDisplay}</td>
                            <th class="col-header">活性</th><td class="col-data">${active}</td>
                            <th class="col-header">種類</th><td class="col-data">${type}</td>
                            <th class="col-header">性向</th><td class="col-data">${align}</td>
                        </tr>
                        <tr>
                            <th class="col-header">消耗MP</th><td class="col-data">${mp}</td>
                            <th class="col-header">消耗HP</th><td class="col-data">${hp}</td>
                            <th class="col-header">材料・触媒</th><td class="col-data" colspan="3">${material}</td>
                            <th class="col-header">持続時間</th><td class="col-data" colspan="3">${duration}</td>
                        </tr>
                        <tr>
                            <th class="col-header">対象</th><td class="col-data" colspan="2">${target}</td>
                            <th class="col-header">再使用時間</th><td class="col-data">${reuse}</td>
                            <th class="col-header">効果・性能</th><td class="col-data" colspan="7">${effect}</td>
                        </tr>
                        <tr>
                            <th class="col-header">習得Lv.</th><td class="col-data">${acqLv}</td>
                            <th class="col-header">取得方法</th><td class="col-data" colspan="3">${obtain}</td>
                            <th class="col-header">価格</th><td class="col-data" colspan="5">${price}</td>
                        </tr>
                        <tr>
                            <th class="col-header">ドロップ</th><td class="col-data" colspan="10">${Droporigin}</td>
                        </tr>
                        <tr>
                            <th class="col-header">【蘇生】</th><td class="col-data" colspan="10">${Dropcomp}</td>
                        </tr>
                        <tr>
                            <th class="col-header">備考1</th><td class="col-data" colspan="5">${note1}</td>
                            <th class="col-header">備考2</th><td class="col-data" colspan="4">${note2}</td>
                        </tr>`
            }
            html +=`</tbody>`;
        }
        html += `</table>`;
        document.getElementById('result').innerHTML = html;
// テーブル描画後
// クラスフィルタリングの初期化
        document.querySelectorAll('.class-btn').forEach(btn => {
            btn.classList.remove('active'); // すべてのボタンからアクティブクラスを削除
        });
        document.querySelector('.class-btn[data-cls="君"]').classList.add('active'); // 初期状態で「君」ボタンをアクティブにする
        document.querySelectorAll('.record-table').forEach(tr => {
            tr.style.display = ''; // 初期状態で全ての行を表示
        });
// クラスフィルタリングのイベントリスナーを追加
    document.querySelectorAll('.class-btn').forEach(btn => {
// 各ボタンにクリックイベントリスナーを追加
        btn.addEventListener('click', function() {
// クリックされたボタンのクラスを取得
            document.querySelectorAll('.class-btn').forEach(b => b.classList.remove('active'));
// すべてのボタンからアクティブクラスを削除
            // クリックされたボタンにアクティブクラスを追加
            this.classList.add('active');
            const selected = this.dataset.cls;
        // 選択されたクラスに基づいて行をフィルタリング
            document.querySelectorAll('.record-table').forEach(tr => {
            // 各行に対して表示/非表示を設定
            // tr.dataset.clsは行のdata-cls属性からクラス名を取得
                //if (selected === 'all' || tr.dataset.cls === selected) {
            // tr.dataset.cls に selected の文字列が含まれるかチェック
                if (selected === 'all' || tr.dataset.cls.includes(selected)) {
                    tr.style.display = '';
                } else {
                    tr.style.display = 'none';
                }
            });
        });
    });
})
});
</script>
</body>
</html>