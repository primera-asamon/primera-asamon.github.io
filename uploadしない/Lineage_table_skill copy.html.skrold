<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8" />
    <title>リネージュリマスター・スキル一覧</title>
    <meta name="description" content="">
    <meta name="keywords" content="">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css">
    <!-- <link rel="stylesheet" href="normalize.css"> -->
    <!-- アイコンフォントの利用方法 http://fortawesome.github.io/Font-Awesome/ -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
    <!-- <link rel="stylesheet" href="font-awesome.min.css"> -->
    <link rel="stylesheet" href="Lineage_main.css">
    <!-- <script src="jquery.min.js"></script> -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="Lineage_main.css">
    <link rel="stylesheet" href="Lineage_skill.css">
</head>
<body id="top">
    <div class="nav">
        <ul class="nav-group">
            <li><a href="index.html">ホーム</a><i class="fa fa-home"></i></li>
            <li><a href="Lineage_table_monster.html">Monsters</a></li>
            <li><a href="Lineage_table_drop.html">Drops</a></li>
            <li><a href="Lineage_table_skill.html" class="active">&nbsp;Skills</a></li>
            <li><a href="LineageREMASTER_IME.html">IME</a></li>
            <li><a href="LineageREMASTER_ATOK.html">ATOK</a></li>
            <li><a href="LineageREMASTERED_etc.html">諸表</a></li>
            <li><a href="font.html">大字</a></li>
            <li><a href="inkey_JAJP.html">押下釦</a></li>
        </ul>
    </div>
<!-- ページ冒頭に非表示で読み上げ対応の国際化・説明テキスト -->
    <p id="screenreader-info" lang="en">
        This page lists MMORPG skills for Japanese-speaking players. It does not contain navigation or language switching. If you are using a screen reader or are not fluent in Japanese, please note that this page is for reference only and may not offer interactive support.
    </p>
<!-- 日本語でのページ説明（視認表示可） -->
    <p id="screenreader-info_jp" class="page-description">
        このページは日本語話者向けに設計されたMMORPGスキルの一覧表です。リンクやナビゲーション機能は設けておらず、ページ全体の内容を1ページで完結する構成になっています。内容の把握を主目的としています。
    </p>
<!-- 技術・魔法一覧のインポート(旧仕様)※スマホでは取得できないから 
 <input type="file" id="fileInput">
-->
<!-- 技術・魔法一覧のインポート(前仕様)※ファイル全体のペースト(長大なデータでは不適当) -->
<!-- <button id="submitBtn">表示</button>
     <div id="output"></div>
-->
<!-- 技術・魔法一覧のインポート(新仕様)※ファイル名のハードコーディング -->
    <button id="loadBtn">表示</button>
<!-- HTML（ボタンやセレクトボックスを追加） -->
    <div id="classFilterBtns" style="margin-bottom: 15px;">
        <button class="class-btn" data-cls="all">all</button>
        <button class="class-btn" data-cls="君">君</button>
        <button class="class-btn" data-cls="騎">騎</button>
        <button class="class-btn" data-cls="妖" data-elf="火">火</button>
        <button class="class-btn" data-cls="妖" data-elf="水">水</button>
        <button class="class-btn" data-cls="妖" data-elf="風">風</button>
        <button class="class-btn" data-cls="妖" data-elf="地">地</button>
        <button class="class-btn" data-cls="魔">魔</button>
        <button class="class-btn" data-cls="闇">闇</button>
        <button class="class-btn" data-cls="竜">竜</button>
        <button class="class-btn" data-cls="闘">闘</button>
        <button class="class-btn" data-cls="剣">剣</button>
        <button class="class-btn" data-cls="槍">槍</button>
        <button class="class-btn" data-cls="闘">闘</button>
        <button class="class-btn" data-cls="幻">幻</button>
        <button class="class-btn" data-cls="聖">聖</button>
<!-- スキル一覧のフィルタリングラジオボタン -->
        <label><input type="radio" name="matchType" value="only" checked> 完全一致</label>
        <label><input type="radio" name="matchType" value="includes"> 部分一致</label>
    </div>
<!-- 技術・魔法一覧の表示場所 ↓-->    
    <div id="result">
    </div>
<!-- 技術・魔法一覧の表示場所 ↑-->    
<!-- 脚注・権利表記 -->
    <div class="footer-text">
        <footer role="contentinfo">
            <section lang="ja">
                <h5 class="sr-only">著作権情報</h5>
                <small>当サイトで使用されているリネージュの画像・BGM及びその他の表現物の権利は下記のとおり権利者に帰属します：</small>
            </section>
            <section lang="en">
                <h5 class="sr-only">Copyright notice</h5>
                <small>Lineage and Lineage Eternal Life are registered trademarks of NCsoft Corporation.&copy;  1998-2011 Copyright NCsoft Corporation. NC Japan K.K. was granted by NCsoft Corporation the right to publish, distribute, and transmit Lineage Eternal Life in Japan. All Rights Reserved.</small>
            </section>
            <section lang="zh-TW">
                <h5 class="sr-only">版权声明</h5>
                <small>本頁面使用之《Lineage》相關素材，其版權皆屬原創作者所有。</small>
            </section>
        </footer>
    </div>
<!-- FC2ではapplication/scriptでもjsファイル読み込み時にtext/htmlに変更され駆動しない。Javascript中にhtmlタグで開始される行がある場合誤認される。
対策：全ての行はhtml_pcv =+`～ではじめること。またはjs独立ファイルはあきらめる。 -->
<!--    <script src="lineage_skill.js" defer></script> -->
<script>
    let html_pcv = ''; // PC用レイアウト格納用
    let html_spv = ''; // スマホ用レイアウト格納用*未実装
// スクリプトの読み込みを待つためのDOMContentLoadedイベントリスナー
    document.addEventListener('DOMContentLoaded', function() {
        console.log("DOM読み込み完了");
    });
// document.getElementById('fileInput').addEventListener('change', function(e) {
//スマホでは無理だからTSV選択はさせない。TSVファイル名のハードコーディング。
document.getElementById('loadBtn').addEventListener('click', function () {
    // 英文・日本語のスクリーンリーダー向け説明を非表示に
    const info_en = document.getElementById("screenreader-info");
    const info_jp = document.getElementById("screenreader-info_jp");

    if (!info_en.classList.contains("sr-only")) {
        info_en.classList.add("sr-only");
    }
    if (!info_jp.classList.contains("sr-only")) {
        info_jp.classList.add("sr-only");
    }

    // 告知文を非表示に
    const notice = document.getElementById("notice");
    if (notice) {
        notice.style.display = "none";
    }

    // url掃除。ページロード時をイベントとして処理するのは宿題。今は表示ボタンがトリガー。
// 表示されていない状態なのに #class=xxx があるならハッシュを消す
    if (!document.getElementById('result').innerHTML && location.hash.includes("class=")) {
        history.replaceState(null, null, location.pathname);
    }
// TSV読み込みと描画 タイムスタンプを附与したリクエストによる強制再読み込みによって、FC2Serverのキャッシュ寿命を回避。
    fetch('LineageREMASTER_skill3.tsv?v=' + new Date().getTime())
        .then(response => response.text())
        .then(text => {
//test用
// 読み込み成功時の処理
console.log("スクリプト開始");
console.log("DOM読み込み待機中");

function setup() {
  console.log("setup開始");

  const btn = document.getElementById('loadBtn');
  if (btn) {
    console.log("ボタン取得成功");
    btn.addEventListener('click', () => {
      console.log("ボタンクリック");
      fetch('LineageREMASTER_skill3.tsv?v=' + new Date().getTime())
        .then(response => {
          if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
          return response.text();
        })
        .then(text => {
          console.log("読み込み成功");
          document.getElementById('result').innerHTML = html_pcv;
//        document.getElementById('result').textContent = text;

//      DOM構築後に初期化処理を確実に実行
        requestAnimationFrame(() => {
            initializeTableBehavior();
        });

        })
        .catch(error => {
          console.error("読み込みエラー:", error);
        });
    });
  } else {
    console.log("loadBtn 見つからず");
  }
}
// DOMContentLoaded イベントを使用して、DOMの読み込み完了を待つ
if (document.readyState === 'loading') {
  console.log("DOM読み込み待機中");
  document.addEventListener('DOMContentLoaded', setup);
} else {
  console.log("DOMすでに構築済み、即時実行");
  setup();
}
    // [表示]ボタンを無効化＋グレーアウト
    const loadBtn = document.getElementById("loadBtn");
    if (loadBtn) {
        loadBtn.disabled = true;
        loadBtn.style.opacity = "0.5";
        loadBtn.style.cursor = "not-allowed";
        loadBtn.title = "クラス選択時に自動表示されるため、このボタンは不要です。";
    }
// ここにTSVパース＆表示処理を書く
        const lines = text.trim().split('\n');
        let html_pcv = `<table>`;
        for (const line of lines) {
            const fields = line.split('\t');
            console.log(`フィールド数(${line}):`, fields.length); // フィールド数を確認

            if (fields.length < 24) {
                console.warn("データ不足:", fields);
                continue; // フィールド数が不足している場合スキップ
            }
// 各フィールドの値を変数に格納
            const [no,img,level,name,cls,elf,active,type,align,mp,hp,material,duration,target,reuse,effect,acqLv,obtain,price,Droporigin,Dropcomp,note1,note2,EOR] = line.split('\t');
            // 各フィールドをTAB分割 EOR(End Of Record)を無視
            // imgは画像のURLだが、ここでは使用しないので無視。値は"全角Space"
            // EORは行の終わりを示すが、ここでは使用しないので無視。値は"■"

            // clsとelfのまとめ表示
            let clsDisplay = cls;
            if (cls === "妖" && elf) {
                clsDisplay += `（${elf}）`;
            }
            if (window.innerWidth <= 438) {
// #region sauce
//  --- スマホ用テーブル出力 ---
            // 等級・スキルレベルの出力部分
            let lvDisplay ="";
            if (/^\d+$/.test(level)) {
            // 数字のみの場合
                lvDisplay += `Lv.${level}`;
            } else {
            // 空または文字列（神話・伝説など）の場合
                lvDisplay += `${level}`;
            }
            html_pcv += `<tbody class="record-table" data-cls="${cls}" data-elf="${elf}">`  // 1レコードが1tbodyで341個(2025/07/07時点)～ある
            html_pcv += `<tr class="spv-layout record-title"><td class="spv-col-data_no">No.${no}</td><td class="spv-col-data_skillname">${lvDisplay}　${name}</td></tr>`;
            html_pcv += `<tr><th class="spv-col-header">習得クラス</th><td class="spv-col-data">${clsDisplay}</td></tr>`;
            html_pcv += `<tr><th class="spv-col-header">活性</th><td class="spv-col-data">${active}</td></tr>`;
            html_pcv += `<tr><th class="spv-col-header">種類</th><td class="spv-col-data">${type}</td></tr>`;
            html_pcv += `<tr><th class="spv-col-header">性向</th><td class="spv-col-data">${align}</td></tr>`;
            html_pcv += `<tr><th class="spv-col-header">消耗MP</th><td class="spv-col-data">${mp}</td></tr>`;
            html_pcv += `<tr><th class="spv-col-header">消耗HP</th><td class="spv-col-data">${hp}</td></tr>`;
            html_pcv += `<tr><th class="spv-col-header">材料・触媒</th><td class="spv-col-data">${material}</td></tr>`;
            html_pcv += `<tr><th class="spv-col-header">持続時間</th><td class="spv-col-data">${duration}</td></tr>`;
            html_pcv += `<tr><th class="spv-col-header">対象</th><td class="spv-col-data">${target}</td></tr>`;
            html_pcv += `<tr><th class="spv-col-header">再使用時間</th><td class="spv-col-data">${reuse}</td></tr>`;
            html_pcv += `<tr><th class="spv-col-header">効果・性能</th><td class="spv-col-data">${effect}</td></tr>`;
            html_pcv += `<tr><th class="spv-col-header">習得Lv.</th><td class="spv-col-data">${acqLv}</td></tr>`;
            html_pcv += `<tr><th class="spv-col-header">取得方法</th><td class="spv-col-data">${obtain}</td></tr>`;
            html_pcv += `<tr><th class="spv-col-header">価格</th><td class="spv-col-data">${price}</td></tr>`;
            html_pcv += `<tr><th class="spv-col-header">ドロップ</th><td class="spv-col-data">${Droporigin}</td></tr>`;
            html_pcv += `<tr><th class="spv-col-header">【蘇生】</th><td class="spv-col-data">${Dropcomp}</td></tr>`;
            html_pcv += `<tr><th class="spv-col-header">備考1</th><td class="spv-col-data">${note1}</td></tr>`;
            html_pcv += `<tr><th class="spv-col-header">備考2</th><td class="spv-col-data">${note2}</td></tr>`;
            html_pcv += `</tbody>`;
            } else {
// #endregion
//  --- PC用テーブル出力 ---
            html_pcv += `<tbody class="record-table" data-cls="${cls}" data-elf="${elf}">`
            // No.とLevelとスキル名は「<th>～」を使用しない。
                html_pcv += `<tr class="record-title">
                            <td class="col-data_no">No.${no}</td>`
                // ...existing code...
                // 等級・スキルレベルの出力部分
                            if (/^\d+$/.test(level)) {
                    // 数字のみの場合
                                html_pcv += `<td class="col-data_level">Lv.${level}</td>`;
                            } else {
                    // 空または文字列（神話・伝説など）の場合
                                html_pcv += `<td class="col-data_level">${level}</td>`;
                            }   
                    html_pcv += `<td class="col-data_skillname" colspan="7">${name}</td>
                        </tr>`
                html_pcv += `<tr>
                            <th class="col-header">習得クラス</th>
                            <td class="col-data" colspan="2">${clsDisplay}</td>
                            <th class="col-header">活性</th><td class="col-data">${active}</td>
                            <th class="col-header">種類</th><td class="col-data">${type}</td>
                            <th class="col-header">性向</th><td class="col-data">${align}</td>
                        </tr>
                        <tr>
                            <th class="col-header">消耗MP</th><td class="col-data">${mp}</td>
                            <th class="col-header">消耗HP</th><td class="col-data">${hp}</td>
                            <th class="col-header">材料・触媒</th><td class="col-data" colspan="2">${material}</td>
                            <th class="col-header">持続時間</th><td class="col-data" colspan="3">${duration}</td>
                        </tr>
                        <tr>
                            <th class="col-header">対象</th><td class="col-data" colspan="2">${target}</td>
                            <th class="col-header">再使用時間</th><td class="col-data">${reuse}</td>
                            <th class="col-header">効果・性能</th><td class="col-data" colspan="7">${effect}</td>
                        </tr>
                        <tr>
                            <th class="col-header">習得Lv.</th><td class="col-data">${acqLv}</td>
                            <th class="col-header">取得方法</th><td class="col-data" colspan="3">${obtain}</td>
                            <th class="col-header">価格</th><td class="col-data" colspan="5">${price}</td>
                        </tr>
                        <tr>
                            <th class="col-header">ドロップ</th><td class="col-data" colspan="10">${Droporigin}</td>
                        </tr>
                        <tr>
                            <th class="col-header">【蘇生】</th><td class="col-data" colspan="10">${Dropcomp}</td>
                        </tr>
                        <tr>
                            <th class="col-header">備考1</th><td class="col-data" colspan="5">${note1}</td>
                            <th class="col-header">備考2</th><td class="col-data" colspan="4">${note2}</td>
                        </tr>`
            }
            html_pcv +=`</tbody>`;
        }
        html_pcv += `</table>`;
        document.getElementById('result').innerHTML = html_pcv;
// テーブル描画後
// クラスフィルタリングの初期化
        document.querySelectorAll('.class-btn').forEach(btn => {
            btn.classList.remove('active'); // すべてのボタンからアクティブクラスを削除
        });
// 初期状態で「all」ボタンをアクティブにする
document.querySelector('.class-btn[data-cls="all"]').classList.add('active');
// tbodyごとに初期表示を設定（record-titleのみ表示）
document.querySelectorAll('tbody.record-table').forEach(tbody => {
    const isTarget = tbody.dataset.cls === 'all';
    tbody.dataset.collapsed = isTarget ? 'false' : 'true';
// 各クラス毎の表示非表示判定は？
    console.log(`tbody ${tbody.dataset.cls} → collapsed=${tbody.dataset.collapsed}`);

    tbody.querySelectorAll('tr').forEach(tr => {
        const isTitle = tr.classList.contains('record-title');
        tr.style.display = (isTarget || isTitle) ? '' : 'none';
// isTitle=true？それともrecord-titleでない行がtrueなの？
        const text = tr.textContent.trim().slice(0, 10);
        console.log(`tr: "${text}", isTitle: ${isTitle}`);
    });
});
// 各ボタンにクリックイベントリスナーを追加
document.querySelectorAll('.class-btn').forEach(btn => {
    btn.addEventListener('click', function () {
        // アクティブクラスの切り替え
        document.querySelectorAll('.class-btn').forEach(b => b.classList.remove('active'));
        this.classList.add('active');
        const selectedCls = this.dataset.cls;
        const selectedElf = this.dataset.elf || '';
        const matchType = document.querySelector('input[name="matchType"]:checked').value;
        // tbodyごとにフィルタリング
        document.querySelectorAll('tbody.record-table').forEach(tbody => {
            const cls = tbody.dataset.cls || '';
            const elf = tbody.dataset.elf || '';
        // 初期値isMatchはfalse＝非表示
            let isMatch = false;
            if (selectedCls === 'all') {
                isMatch = true;
        // ラジオボタンの選択状態
            } else if (matchType === 'only') {
        // 完全一致モード
                if (selectedCls === '妖') {
                    isMatch =
                        (cls === '妖') &&
                        (elf === selectedElf || elf === '無属性');
                } else {
                    isMatch = cls === selectedCls;
                }
            } else {
        // 部分一致モード
                if (selectedCls === '妖') {
                    isMatch =
                        cls.includes('妖') &&
                        (elf === selectedElf || elf === '無属性');
                } else {
                    isMatch = cls.includes(selectedCls);
                }
            }
            tbody.dataset.collapsed = 'true'; // 既定：折りたたみ
            tbody.querySelectorAll('tr').forEach(tr => {
                    // 一致するクラスのみ表示、そうでなければ完全非表示
                const isTitle = tr.classList.contains('record-title');
                tr.style.display = isMatch && isTitle ? '' : 'none';
            });
        });
    });
});
// タイトル行クリックで展開／折りたたみ切り替え
document.querySelectorAll('tr.record-title').forEach(titleRow => {
    titleRow.addEventListener('click', function () {
        const tbody = this.closest('tbody');
        const isCollapsed = tbody.dataset.collapsed === 'true';

        tbody.dataset.collapsed = isCollapsed ? 'false' : 'true';

        tbody.querySelectorAll('tr').forEach(tr => {
            const isTitle = tr.classList.contains('record-title');
            tr.style.display = isCollapsed || isTitle ? '' : 'none';
        });
    });
});
// クラスコードマップ(url用/数字は公式webページのClassID)
const classCodeMap = {
//  "全": "all"   //-/全クラスallクラスとして設定しない。未定義として全件表示扱い。
  "君": "pri",  //0/君主prince・princess
  "騎": "kni",  //1/ナイトknight
  "妖": "elf",  //2/エルフelf
  "魔": "wiz",  //3/ウィザードwizard
  "闇": "dak",  //4/ダークエルフdarkelf
  "竜": "dra",  //5/ドラゴンナイトdragonknight
  "幻": "ill",  //6/イリュージョニストillusionist
  "闘": "war",  //7/ウォリアーwarrior
  "剣": "fen",  //8/フェンサーFencer
  "槍": "lan",  //9/ランサーlancer
  "聖": "Pal"  //10/パラディンPaladin
};
// クラスコード取得関数
function getClassCode(label) {
  return classCodeMap[label] || "all"; // 未定義なら仮のフォールバック
}// クラスフィルタリング関数
document.querySelectorAll('.class-btn').forEach(btn => {
    btn.addEventListener('click', function () {
        const label = this.dataset.cls; // たとえば "聖"
        const code = getClassCode(label); // たとえば "hol"
        history.replaceState(null, null, `#class=${code}`);
//        filterByClass(code); // 既存の注出関数
    });
});
    // reader.readAsText(e.target.files[0], 'UTF-8');
    // console.log(text); // デバッグ用・341件24フィールドは冗長。
        })
        .catch(error => {
            document.getElementById('result').textContent = '読み込み失敗: ' + error;
        });
    // ここでaddEventListenerの関数を閉じる

// イベントリスナーの再登録を含めた初期化関数↓ここから
function initializeTableBehavior() {
  console.log("🔁 initializeTableBehavior 実行");
  document.querySelectorAll('tbody.record-table').forEach(tbody => {
    const isTarget = tbody.dataset.cls === 'all';
    tbody.dataset.collapsed = isTarget ? 'false' : 'true';
    console.log(`tbody ${tbody.dataset.cls} → collapsed=${tbody.dataset.collapsed}`);
    tbody.querySelectorAll('tr').forEach(tr => {
      const isTitle = tr.classList.contains('record-title');
      tr.style.display = (isTarget || isTitle) ? '' : 'none';
    });
  });
  document.querySelectorAll('tr.record-title').forEach(titleRow => {
    titleRow.addEventListener('click', function () {
      const tbody = this.closest('tbody');
      const isCollapsed = tbody.dataset.collapsed === 'true';
      tbody.dataset.collapsed = isCollapsed ? 'false' : 'true';
      console.log(`トグル: ${tbody.dataset.cls} → ${tbody.dataset.collapsed}`);
      tbody.querySelectorAll('tr').forEach(tr => {
        const isTitle = tr.classList.contains('record-title');
        tr.style.display = isCollapsed || isTitle ? '' : 'none';
      });
    });
  });
}
// イベントリスナーの再登録を含めた初期化関数↑ここまで

});
</script>
</body>
</html>